@page "/silencer-matcher"
@using SilencerData.Client.Interfaces
@using SilencerData.Client.Models
@using System.ComponentModel.DataAnnotations
@inject ISilencerDataService SilencerDataService
@inject ISnackbar Snackbar

<style>
    .mud-expand-panel .mud-expand-panel-header {
        padding: 16px 0px !important;
    }
</style>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Silencer Matcher</MudText>
    <MudText Typo="Typo.body1" Class="mb-8">Find the perfect silencer for your needs.</MudText>

    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (allSilencers != null)
    {
        <MudForm @ref="form" @bind-IsValid="@isValid" @bind-Errors="@errors">
            <MudGrid>
               <MudItem xs="12" sm="6" md="6">
                    <MudSelect T="string" Label="Caliber" Required="true" @bind-Value="preferences.Caliber" 
                               SelectedValuesChanged="@(_ => CheckMinimumRequirements())">
                        @foreach (var caliber in calibers)
                        {
                            <MudSelectItem Value="@caliber">@caliber</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="6">
                    <MudSelect T="string" Label="Class" Required="true" @bind-Value="selectedClass"
                               SelectedValuesChanged="@(async _ => await OnClassSelectionChanged())">
                        <MudSelectItem Value="@("Any")">Any</MudSelectItem>
                        @foreach (var silencerClass in groupedClasses)
                        {
                            <MudSelectItem Value="@silencerClass">@silencerClass</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="6">
                    <MudNumericField @bind-Value="preferences.MinBudget"
                                     @bind-Value:after="@CheckMinimumRequirements"
                                     Label="Min Budget"
                                     Format="C"
                                     Variant="Variant.Outlined"
                                     Min="0"
                                     Max="10000" />
                </MudItem>
                <MudItem xs="12" sm="6" md="6">
                    <MudNumericField @bind-Value="preferences.MaxBudget"
                                     @bind-Value:after="@CheckMinimumRequirements"
                                     Label="Max Budget"
                                     Format="C"
                                     Variant="Variant.Outlined"
                                     Min="0"
                                     Max="10000" />
                                      
                </MudItem>
                @if(MinimumRequirementsMet)
                {
                    <MudItem xs="12">
                        <MudExpansionPanel Gutters="false" Expanded="false" Style="background: var(--mud-palette-background);">
                            <TitleContent>
                                <MudText Typo="Typo.h6" Class="mb-n2">Additional Filters</MudText>
                            </TitleContent>
                            <ChildContent>
                                <MudCard Elevation="0" Outlined="true" Class="mt-3">
                                    <MudCardContent>
                                        <MudGrid>
                                            <MudItem xs="12" sm="6" md="6">
                                                <MudSelect T="string" Label="Manufacturer" @bind-Value="preferences.Manufacturer">
                                                    <MudSelectItem Value="@((string?)null)">Any</MudSelectItem>
                                                    @foreach (var manufacturer in manufacturers)
                                                    {
                                                        <MudSelectItem Value="@manufacturer">@manufacturer</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>
                                            @if (subClasses.Any())
                                            {
                                                <MudItem xs="12" sm="6" md="6">
                                                    <MudSelect T="string" Label="Sub-Class" @bind-Value="preferences.Class"
                                                               SelectedValuesChanged="@(_ => CheckMinimumRequirements())">
                                                        <MudSelectItem Value="@selectedClass">@selectedClass (Default)</MudSelectItem>
                                                        @foreach (var subClass in subClasses)
                                                        {
                                                            <MudSelectItem Value="@subClass">@subClass</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudItem>
                                            }
                                            <MudItem xs="12" sm="6" md="6">
                                                <MudSelect T="string" Label="Material" @bind-Value="preferences.Material">
                                                    <MudSelectItem Value="@((string?)null)">Any</MudSelectItem>
                                                    @foreach (var material in materials)
                                                    {
                                                        <MudSelectItem Value="@material">@material</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>
                                            <MudItem xs="12" sm="6" md="6">
                                                <MudSelect T="LengthPreference" Label="Length Preference" @bind-Value="selectedLengthPreference">
                                                    <MudSelectItem Value="@LengthPreference.Any">Any</MudSelectItem>
                                                    <MudSelectItem Value="@LengthPreference.Short">Short</MudSelectItem>
                                                    <MudSelectItem Value="@LengthPreference.Medium">Medium</MudSelectItem>
                                                    <MudSelectItem Value="@LengthPreference.Long">Long</MudSelectItem>
                                                </MudSelect>
                                            </MudItem>
                                            <MudItem xs="12" sm="6" md="6">
                                                <MudSelect T="WeightPreference" Label="Weight Preference" @bind-Value="selectedWeightPreference">
                                                    <MudSelectItem Value="@WeightPreference.Any">Any</MudSelectItem>
                                                    <MudSelectItem Value="@WeightPreference.Light">Light</MudSelectItem>
                                                    <MudSelectItem Value="@WeightPreference.Medium">Medium</MudSelectItem>
                                                    <MudSelectItem Value="@WeightPreference.Heavy">Heavy</MudSelectItem>
                                                </MudSelect>
                                            </MudItem>
                                            <MudFlexBreak />
                                            <MudItem xs="12" sm="4" md="4">
                                                <MudCheckBox @bind-Value="@preferences.FullAutoRated" Label="Full Auto Rated" Color="Color.Primary"></MudCheckBox>
                                            </MudItem>
                                            <MudItem xs="12" sm="4" md="4">
                                                <MudCheckBox @bind-Value="@preferences.MagnumRated" Label="Magnum Rated" Color="Color.Primary"></MudCheckBox>
                                            </MudItem>
                                            <MudItem xs="12" sm="4" md="4">
                                                <MudCheckBox @bind-Value="@preferences.PistonCompatible" Label="Piston Compatible" Color="Color.Primary"></MudCheckBox>
                                            </MudItem>
                                        </MudGrid>
                                    </MudCardContent>
                                </MudCard>
                            </ChildContent>
                        </MudExpansionPanel>

                    </MudItem>

                }
            </MudGrid>
            <MudButton Disabled="!MinimumRequirementsMet" Variant="Variant.Filled" Color="Color.Primary" Class="mt-8" OnClick="FindMatches">Find Matches</MudButton>
        </MudForm>

        @if (matchingSilencers != null && matchingSilencers.Any())
        {
            <MudText Typo="Typo.h5" Class="mt-16 mb-4">Matching Silencers</MudText>
            <MudTable Items="@matchingSilencers" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@isLoading" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>Manufacturer</MudTh>
                    <MudTh>Model</MudTh>
                    <MudTh>MSRP</MudTh>
                    <MudTh>Caliber</MudTh>
                    <MudTh>Class</MudTh>
                    <MudTh>Length (in)</MudTh>
                    <MudTh>Weight (oz)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Manufacturer">@context.Manufacturer</MudTd>
                    <MudTd DataLabel="Model">@context.Model</MudTd>
                    <MudTd DataLabel="MSRP">@context.MSRP.ToString("C")</MudTd>
                    <MudTd DataLabel="Caliber">@context.Caliber</MudTd>
                    <MudTd DataLabel="Class">@context.Class</MudTd>
                    <MudTd DataLabel="Length">@context.LengthIn</MudTd>
                    <MudTd DataLabel="Weight">@context.WeightOz</MudTd>
                </RowTemplate>
            </MudTable>
        }
        else if (matchingSilencers != null)
        {
            <MudAlert Severity="Severity.Info" Class="mt-8">No matching silencers found. Try adjusting your preferences.</MudAlert>
        }
    }
    else
    {
        <MudAlert Severity="Severity.Error">Failed to load silencer data. Please try refreshing the page.</MudAlert>
    }
</MudContainer>

@code {
    private MudForm form = null!;
    private bool isValid;
    private string[] errors = Array.Empty<string>();
    private bool isLoading = true;

    private UserPreferences preferences = new();
    private List<Silencer>? allSilencers;
    private List<Silencer>? matchingSilencers;

    private List<string> calibers = new();
    private List<string> manufacturers = new();
    private List<string> materials = new();

    private LengthPreference selectedLengthPreference = LengthPreference.Any;
    private WeightPreference selectedWeightPreference = WeightPreference.Any;

    private bool MinimumRequirementsMet { get; set; } = false;


    private List<string> groupedClasses = new();
    private List<string> subClasses = new();
    private string selectedClass = "Any";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var silencers = await SilencerDataService.GetSilencerDataAsync();
            allSilencers = silencers.ToList();

            var matcher = new SilencerMatcher(allSilencers);

            calibers = allSilencers.Select(s => s.Caliber).Distinct().OrderBy(c => c).ToList();
            groupedClasses = matcher.GetGroupedClasses();
            manufacturers = allSilencers.Select(s => s.Manufacturer).Distinct().OrderBy(m => m).ToList();
            materials = allSilencers.Select(s => s.TubeMaterial).Distinct().OrderBy(m => m).ToList();
            CheckMinimumRequirements();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading silencer data: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnClassSelectionChanged()
    {
        if (selectedClass != "Any")
        {
            var matcher = new SilencerMatcher(allSilencers);
            subClasses = matcher.GetSubClasses(selectedClass);
            preferences.Class = selectedClass;
        }
        else
        {
            subClasses.Clear();
            preferences.Class = "Any";
        }
        CheckMinimumRequirements();
    }

    private void FindMatches()
    {
        if (isValid && allSilencers != null && MinimumRequirementsMet)
        {
            isLoading = true;
            StateHasChanged();

            try
            {
                preferences.LengthPreference = selectedLengthPreference == LengthPreference.Any ? null : selectedLengthPreference;
                preferences.WeightPreference = selectedWeightPreference == WeightPreference.Any ? null : selectedWeightPreference;
                var matcher = new SilencerMatcher(allSilencers);
                matchingSilencers = matcher.FindMatches(preferences);

                if (!matchingSilencers.Any())
                {
                    Snackbar.Add("No matching silencers found. Try adjusting your preferences.", Severity.Info);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error finding matches: {ex.Message}", Severity.Error);
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
        else
        {
            Snackbar.Add("Please fill in all required fields.", Severity.Warning);
        }
    }
    private void CheckMinimumRequirements()
    {
        MinimumRequirementsMet = !string.IsNullOrEmpty(preferences.Caliber) &&
                                 !string.IsNullOrEmpty(preferences.Class) &&
                                 preferences.MinBudget >= 0 &&
                                 preferences.MaxBudget > preferences.MinBudget;
        StateHasChanged();
    }
}