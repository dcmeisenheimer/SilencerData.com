@page "/silencers"
@inject ISilencerDataService SilencerDataService

<style>
    /* Simplified fade-in animation */
    @@keyframes simpleFadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    .fade-in {
        animation: simpleFadeIn 0.3s ease-out;
    }

    /* Subtle hover effect for table rows */
    .mud-table-row:hover {
        background-color: rgba(0, 0, 0, 0.04);
        transition: background-color 0.2s ease;
    }

    /* Animated Loading State */
    @@keyframes shimmer {
        0% {
            background-position: -468px 0;
        }

        100% {
            background-position: 468px 0;
        }
    }

    .loading-row {
        animation: shimmer 1.5s infinite linear;
        background: linear-gradient( to right, var(--mud-palette-background) 0%, var(--mud-palette-table-lines) 50%, var(--mud-palette-background) 100% );
        background-size: 800px 104px;
        opacity: 0.7; /* Adjust for subtlety */
    }

    /* CSS containment for better performance */
    .contain-paint {
        contain: paint;
    }

    /* Optimize scrolling performance */
    .optimize-scroll {
        will-change: transform;
        backface-visibility: hidden;
    }
</style>

  <MudPaper Class="pa-4 fade-in contain-paint">
    <MudDataGrid @ref="_dataGrid"
                T="Silencer"
                ServerData="ServerReload"
                Filterable="false"
                Elevation="0"
                Dense="true"
                Hover="true"
                Bordered="true"
                Striped="false"
                Virtualize="true"
                ItemSize="48"
                FixedHeader="true"
                Height="80vh"
                LoadingProgressColor="Color.Tertiary"
                Class="optimize-scroll">
        <LoadingContent>
            <MudStack>
                @for (int i = 0; i < _pageSizeOption[0]; i++)
                {
                    <div class="loading-row" style="height: 48px;"></div>
                }
            </MudStack>
        </LoadingContent>
        <ToolBarContent>
            <MudText Typo="Typo.h6">Silencers</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString"
                          Placeholder="Search"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          AdornmentColor="Color.Secondary"
                          IconSize="Size.Medium"
                          Class="px-2 pb-4 search-input"
                          T="string"
                          Margin="Margin.Dense"
                          Immediate="false"
                          DebounceInterval="300"
                          OnDebounceIntervalElapsed="OnSearch">
            </MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Manufacturer" />
            <PropertyColumn Property="x => x.Model" />
            <PropertyColumn Property="x => x.MSRP" Format="C" />
            <PropertyColumn Property="x => x.LengthIn" Title="Length (in)" />
            <PropertyColumn Property="x => x.DiameterIn" Title="Diameter (in)" />
            <PropertyColumn Property="x => x.WeightOz" Title="Weight (oz)" />
            <PropertyColumn Property="x => x.TubeMaterial" Title="Tube Material" />
            <PropertyColumn Property="x => x.Color" />
            <PropertyColumn Property="x => x.Caliber" />
            <PropertyColumn Property="x => x.Mount" />
            <PropertyColumn Property="x => x.FullAutoRated" Title="Full Auto Rated"/>
            <PropertyColumn Property="x => x.BarrelLengthRestrictions" Title="Barrel Length Restrictions" />
            <PropertyColumn Property="x => x.MagnumRated" Title="Magnum Rated" />
            <PropertyColumn Property="x => x.PistonCompatible" Title="Piston Compatible" />
            <PropertyColumn Property="x => x.Class" />
            <PropertyColumn Property="x => x.ShortestModularLength" Title="Shortest Modular Length" />
            <PropertyColumn Property="x => x.BaffleTypecount" Title="Baffle Type/Count" />
            <PropertyColumn Property="x => x.AdditionalNotes" Title="Additional Notes" />
            <TemplateColumn Title="Webpage">
                <CellTemplate>
                    <MudLink Href="@context.Item.Webpage" Target="_blank">Link</MudLink>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="PEW Science Page(s) (If applicable)">
                <CellTemplate>
                    @if (!string.IsNullOrEmpty(context.Item.PewSciencePagesIfApplicable))
                    {
                        <MudLink Href="@context.Item.PewSciencePagesIfApplicable" Target="_blank">Link</MudLink>
                    }
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <NoRecordsContent>
            <MudText>No matching silencers found</MudText>
        </NoRecordsContent>
        <PagerContent>
            <MudDataGridPager T="Silencer" PageSizeOptions="@_pageSizeOption" />
        </PagerContent>
        
    </MudDataGrid>
</MudPaper>

@code {
    private IEnumerable<Silencer> _silencers = new List<Silencer>();
    private readonly int[] _pageSizeOption = { 25, 50, 100 };
    private MudDataGrid<Silencer> _dataGrid = default!;
    private string? searchString = null;
   
    protected override async Task OnInitializedAsync()
    {
        _silencers = await SilencerDataService.GetSilencerDataAsync();
    }

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<GridData<Silencer>> ServerReload(GridState<Silencer> state)
    {
        IEnumerable<Silencer> data = await SilencerDataService.GetSilencerDataAsync();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchString))
        {
            data = data.Where(s =>
                s.Manufacturer.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                s.Model.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                s.Caliber.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                s.Class.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            );
        }

        // Apply column filters
        foreach (var filterDefinition in state.FilterDefinitions)
        {
            if (filterDefinition.Column.PropertyName != null)
            {
                var property = typeof(Silencer).GetProperty(filterDefinition.Column.PropertyName);
                if (property != null)
                {
                    data = data.Where(s =>
                    {
                        var value = property.GetValue(s)?.ToString();
                        return value != null && value.Contains(filterDefinition.Value?.ToString() ?? "", StringComparison.OrdinalIgnoreCase);
                    });
                }
            }
        }

        // Apply sorting
        if (state.SortDefinitions.Any())
        {
            IOrderedEnumerable<Silencer>? sortedData = null;
            foreach (var sortDefinition in state.SortDefinitions)
            {
                if (sortDefinition.SortBy != null)
                {
                    var property = typeof(Silencer).GetProperty(sortDefinition.SortBy);
                    if (property != null)
                    {
                        if (sortedData == null)
                        {
                            sortedData = sortDefinition.Descending
                                ? data.OrderByDescending(s => property.GetValue(s))
                                : data.OrderBy(s => property.GetValue(s));
                        }
                        else
                        {
                            sortedData = sortDefinition.Descending
                                ? sortedData.ThenByDescending(s => property.GetValue(s))
                                : sortedData.ThenBy(s => property.GetValue(s));
                        }
                    }
                }
            }
            data = sortedData ?? data;
        }

        // Apply pagination
        var totalItems = data.Count();
        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize);

        return new GridData<Silencer>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return _dataGrid.ReloadServerData();
    }
}